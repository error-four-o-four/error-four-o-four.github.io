const getElementsFromIds = (all, id) => ({
	...all,
	[id.split('-')[1]]: document.querySelector(id),
});

const sections = [
	'#section-welcome',
	'#section-projects',
	'#section-about',
].reduce(getElementsFromIds, {});


const pfpBg = document.getElementById('img-pfp-bg');
const pfp = document.getElementById('img-pfp');

const projects$1 = [];

const uls = [
	'#ul-navbar',
	'#ul-languages',
	'#ul-frameworks',
	'#ul-certificates',
	'#ul-socials',
].reduce(getElementsFromIds, {});

const links$1 = {
	navbar: [...uls.navbar.querySelectorAll('a')],
	languages: [],
	frameworks: [],
	certificates: [],
	socials: [],
};

var elements = {
	sections,
	pfpBg,
	pfp,
	projects: projects$1,
	uls,
	links: links$1,
};

const imgPath = './public/assets/';

const projects = [
	{
		title: 'Dummy',
		descr:
			'Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt quo amet minima similique voluptatem consectetur saepe impedit?',
		thumb: {
			src: `${imgPath}test1.png`,
			srcset: null,
		},
		links: {
			repo: '#',
			demo: '#',
		},
	},
	{
		title: 'Dummy',
		descr:
			'Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt quo amet minima similique voluptatem consectetur saepe impedit?',
		thumb: {
			src: `${imgPath}test3.png`,
			srcset: null,
		},
		links: {
			repo: '#',
			demo: '#',
		},
	},
	{
		title: 'Fancy Web Components',
		descr:
			'A set of reusable, custom web components.',
		thumb: {
			src: null,
			srcset: null,
		},
		links: {
			repo: 'https://github.com/error-four-o-four/native-web-component-selector',
			demo: null,
		},
	},
	{
		title: 'DOM Utilities',
		descr: 'A small typescript-library to manipulate the DOM.',
		thumb: {
			src: null,
			srcset: null,
		},
		links: {
			repo: 'https://github.com/error-four-o-four/utils-dom',
			demo: null,
		},
	},
];

const getJsonData = async (url) => {
	const fetched = await fetch(url);
	return await fetched.json();
};

const titleCase = (str) => str.at(0).toUpperCase() + str.substring(1);

const icons = await getJsonData('./src/data/icons.json');
const reduceIcons = (all, slug) => ({ ...all, [slug]: icons[slug] });

const links = {
	languages: ['html5', 'css3', 'postcss', 'javascript', 'typescript'].reduce(reduceIcons, {}),
	frameworks: ['nodedotjs', 'vitest', 'vite', 'rollupdotjs'].reduce(reduceIcons, {}),
	socials: ['openprocessing', 'github', 'npm'].reduce(reduceIcons, {})
};

const certificates = [
	{
		title: 'Responsive Web Design',
		url: 'https://www.freecodecamp.org/certification/httpfourofour/responsive-web-design',
	},
	{
		title: 'JavaScript Algorithms and Data Structures',
		url: 'https://freecodecamp.org/certification/httpfourofour/javascript-algorithms-and-data-structures',
	},
];

function createElements() {
	createProjectCards();
	createAboutLinks();
	createAboutCertificates();
}

function createProjectCards() {
	const cardsWrap = elements.sections.projects.children[0];

	for (const { title, descr, thumb, links } of projects) {
		const cardElement = document.createElement('article');
		// prettier-ignore
		const imageElement = (thumb.src === null)
			? ``
			: `<img
				data-src="${thumb.src}"
				alt="Thumbnail ${title}"/>`;

		// prettier-ignore
		const linkElements = Object.entries(links).map(([type, url]) => (url === null)
			? ``
			: `<a
				href="${url}"
				target="_blank"
				rel="noopener">${titleCase(type)}</a>`
		).join('');

		cardElement.classList.add('project-card');
		cardElement.innerHTML = `
			<div class="project-thumb">
				${imageElement}
				</div>
				<div class="project-content">
					<div class="project-descr">
					<h4>${title}</h4>
					<p>${descr}</p>
				</div>
				<div class="project-links">
					${linkElements}
				</div>
			</div>
		`;

		cardsWrap.append(cardElement);
		elements.projects.push(cardElement);
	}
}

function createAboutLinks() {
	for (const category in links) {
		const listElement = elements.uls[category];

		for (const slug in links[category]) {
			const { title, url, hex } = links[category][slug];
			const itemElement = document.createElement('li');
			const linkElement = document.createElement('a');

			const attr = {
				target: '_blank',
				href: url,
				rel: 'noopener',
				alt: `Link to ${title} homepage`,
				['data-slug']: slug,
				['data-hex']: hex,
			};

			Object.entries(attr).map(([key, val]) => linkElement.setAttribute(key, val));

			linkElement.classList.add('lazy-svg-icon');
			linkElement.innerHTML = `<span class="inject-svg-icon"></span><span>${title}</span>`;
			// linkElement.innerHTML = `<span><img src="./public/icons/${slug}.svg" loading="lazy" alt="${slug} icon"/></span><span>${title}</span>`;

			itemElement.append(linkElement);
			listElement.append(itemElement);

			elements.links[category].push(linkElement);
		}
	}
}

function createAboutCertificates() {
	const listElement = elements.uls.certificates;

	for (const { title, url } of certificates) {
		const itemElement = document.createElement('li');
		const linkElement = document.createElement('a');

		const attr = {
			target: '_blank',
			href: url,
			rel: 'noopener',
			alt: `Link to certificate`,
		};
		Object.entries(attr).map(([key, val]) => linkElement.setAttribute(key, val));

		linkElement.innerHTML = title;

		itemElement.append(linkElement);
		listElement.append(itemElement);

		elements.links.certificates.push(linkElement);
	}
}

async function injectSvgIconElement(elt, data) {
	const slug = elt.getAttribute('data-slug');
	const span = elt.querySelector('.inject-svg-icon');

	span.innerHTML = data[slug];
}

elements.sections.projects.classList.add('hidden');
elements.sections.about.classList.add('hidden');

for (const projectElement of elements.projects) {
	const imgElement = projectElement.querySelector('img');
	imgElement.classList.add('hidden');
}

function createListeners() {
	createNavbarClickListener();

	createSectionObserver();
	createLazyloadObserver();
}

let activeNavbarLink = null;

function updateNavbarLink() {
	if (this.id === 'profile-link') return;

	activeNavbarLink?.classList.remove('active');
	activeNavbarLink = this;
	activeNavbarLink.classList.add('active');
}

function createNavbarClickListener() {
	for (const link of elements.links.navbar) {
		link.onclick = updateNavbarLink.bind(link);
	}
}

function createSectionObserver() {
	const callback = (entries) => {
		for (const entry of entries) {
			const { target, isIntersecting } = entry;
			const { height } = entry.rootBounds;
			const { y: y1, bottom: y2 } = entry.boundingClientRect;

			if (!isIntersecting) continue;

			if (y1 < 0.75 * height && target.classList.contains('hidden')) {
				// fade section in
				target.classList.remove('hidden');
			}

			if (y1 < 0.5 * height && y2 > 0.5 * height) {
				const linkElement = elements.links.navbar.find((elt) => elt.href.split('#')[1] === target.id);
				// highlight active navbar link
				updateNavbarLink.call(linkElement);
			}
		}
	};

	const options = {
		threshold: [...Array(11).keys()].map((i) => i / 10),
	};
	const observer = new IntersectionObserver(callback, options);

	for (const section of Object.values(elements.sections)) observer.observe(section);
}

function createLazyloadObserver() {
	const lazyloadProjectImage = (elt) => {
		const img = elt.querySelector('img');

		if (img === null) return;

		const src = img.getAttribute('data-src');

		img.onload = () => {
			img.onload = null;
			img.classList.remove('hidden');
		};

		img.src = src;
	};

	const lazyloadSvgs = async () => {
		const svgs = await getJsonData('./src/data/svgs.json');
		const links = [...document.querySelectorAll('.lazy-svg-icon')];
		for (const link of links) injectSvgIconElement(link, svgs);
	};

	const callback = (entries, observer) => {
		for (const entry of entries) {
			const { target, isIntersecting } = entry;

			if (!isIntersecting) continue;

			if (target.classList.contains('project-card')) {
				lazyloadProjectImage(target);
				observer.unobserve(target);
				continue;
			}

			if (target.id === 'section-about') {
				lazyloadSvgs();
				observer.unobserve(target);
				continue;
			}
		}
	};

	const options = {
		rootMargin: `0px 0px ${0.5 * window.innerHeight}px 0px`,
	};

	const observer = new IntersectionObserver(callback, options);

	for (const project of elements.projects) observer.observe(project);
	observer.observe(elements.sections.about);
}

const test = {
	get a() {
		return 'value a';
	},
	get b() {
		return 'value b';
	},
	c: 'value c',
};

const { a, ...rest } = test;
console.log(a, rest);

createElements();
createListeners();
